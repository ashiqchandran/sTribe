<%- include("../../views/partials/admin/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link rel="stylesheet" href="/style/admin/product_all.css">
</head>

<div class="content-header">
    <h2 class="content-title">Products Management</h2>
</div>

<div class="container">
    <!-- Search form -->
    <form action="" method="get" class="search-form text-center mb-4">
        <div class="input-group">
            <input type="text" class="form-control search-input" placeholder="Search products or brands" name="search">
            <button class="btn search-button" type="submit">Search</button>
        </div>
    </form>

    <button id="uploadButton" class="btn btn-primary">Upload & Save</button>

    <!-- Product Table -->
    <div class="table-responsive mt-5">
        <table class="table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>&nbsp&nbsp Product Name</th>
                    <th>&nbsp&nbsp Category</th>
                    <th>&nbsp&nbsp Sale Price</th>
                    <th>&nbsp&nbsp Regular Price</th>
                    <th>&nbsp&nbsp Color</th>
                    <th> &nbsp&nbsp Brand</th>
                    <th>&nbsp&nbsp Offer</th>
                    <th>&nbsp&nbsp Quantity</th>
                    <th>&nbsp&nbsp Action</th>
                    <th>&nbsp&nbsp Edit</th>
                    <th>&nbsp&nbsp Delete</th>
                </tr>
            </thead>
            <tbody>
                <% for (let i = data.length - 1; i >= 0; i--) { %>
                <tr>
                    <td>
                        <% if (data[i].productImage && data[i].productImage.length > 0) { %>
                            <% data[i].productImage.forEach((image) => { %>
                                <img src="<%= image %>"
                                     alt="<%= data[i].productName %>" 
                                     class="product-image" 
                                     style="width: 50px; height: 50px; margin: 2px;">
                            <% }); %>
                        <% } else { %>
                            <img src="/images/placeholder.svg" 
                                 alt="No image" 
                                 class="product-image" 
                                 style="width: 50px; height: 50px;">
                        <% } %>
                    </td>
                    <td><%= data[i].productName %></td>
                    <td><%= data[i].category ? data[i].category.name : 'N/A' %></td>
                    <td><%= data[i].salePrice %></td>
                    <td><%= data[i].regularPrice %></td>
                    <td><%= data[i].color %></td>
                    <td><%= data[i].brand %></td>
                    <td>&nbsp&nbsp &nbsp&nbsp 
                        <% if (data[i].productOffer) { %>
                            <%= data[i].productOffer %>% Off
                            <button class="btn btn-sm btn-warning" onclick="editOffer('<%= data[i]._id %>', '<%= data[i].productOffer ? data[i].productOffer : 0 %>')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="removeOffer('<%= data[i]._id %>')">Remove</button>
                        <% } else { %>
                            0%
                            <button class="btn btn-sm btn-info" onclick="addOffer('<%= data[i]._id %>')">Add Offer</button>
                        <% } %>
                    </td>
                    <td><%= data[i].quantity %></td>
                    <td>
                        <% if (data[i].isBlocked == false) { %>
                            <a href="#" onclick="confirmBlock(event, '<%= data[i]._id %>')" class="btn btn-sm btn-danger">Block</a>
                        <% } else { %>
                            <a href="#" onclick="confirmUnblock(event, '<%= data[i]._id %>')" class="btn btn-sm btn-success">Unblock</a>
                        <% } %>
                    </td>
                    <td>
                        <a href="/admin/editProduct?id=<%= data[i]._id %>" class="btn btn-info text-white">Edit</a>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-danger" onclick="confirmDelete(event, '<%= data[i]._id %>')">Delete</button>
                    </td>
                </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination">
        <ul class="pagination justify-content-center">
            <% if (currentPage > 1) { %>
                <li class="page-item"><a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a></li>
            <% } %>
            <% for (let i = 1; i <= totalPages; i++) { %>
                <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
            <% } %>
            <% if (currentPage < totalPages) { %>
                <li class="page-item"><a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a></li>
            <% } %>
        </ul>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script>
  // Add a product offer
async function addOffer(productId) {
    const { value: percentage } = await Swal.fire({
        title: "Add Offer",
        input: "number",
        inputLabel: "Offer Percentage",
        inputPlaceholder: "Enter offer percentage",
        inputAttributes: {
            min: 1,
            max: 99,
            step: 1
        },
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value || value < 1 || value > 99) {
                return "Please enter a valid percentage between 1 and 99";
            }
        }
    });

    if (percentage) {
        updateOffer(productId, percentage);
    }
}

// Edit an existing offer
async function editOffer(productId, currentOffer) {
    const { value: percentage } = await Swal.fire({
        title: "Edit Offer",
        input: "number",
        inputLabel: "Offer Percentage",
        inputPlaceholder: "Enter offer percentage",
        inputValue: currentOffer,
        inputAttributes: {
            min: 1,
            max: 99,
            step: 1
        },
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value || value < 1 || value > 99) {
                return "Please enter a valid percentage between 1 and 99";
            }
        }
    });

    if (percentage) {
        updateOffer(productId, percentage);
    }
}

// Update offer by sending data to the server
// Update offer by sending data to the server
function updateOffer(productId, percentage) {
    $.ajax({
        url: "/admin/addProductOffer",
        method: "POST",
        contentType: "application/json", // Ensure content type is JSON
        data: JSON.stringify({
            productId: productId,
            percentage: percentage
        }),
        success: (response) => {
            if (response.status) {
                Swal.fire('Success', 'Offer updated successfully', 'success').then(() => {
                    location.reload(); // Reload the page after success
                });
            } else {
                Swal.fire('Error', response.message || 'Failed to update offer', 'error');
            }
        },
        error: (error) => {
            console.error('Error:', error);
            Swal.fire('Error', 'An unexpected error occurred', 'error');
        }
    });
}


// Remove an offer from a product
function removeOffer(productId) {
    Swal.fire({
        title: "Remove offer",
        text: "Are you sure you want to remove this offer?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, remove it"
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: "/admin/removeProductOffer",
                method: 'POST',
                data: { productId: productId },
                success: (response) => {
                    if (response.status) {
                        Swal.fire("Removed!", "The offer has been removed", "success").then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', response.message || 'Failed to remove offer', 'error');
                    }
                },
                error: (error) => {
                    console.error('Error:', error);
                    Swal.fire('Error', 'An unexpected error occurred', 'error');
                }
            });
        }
    });
}

// Confirm and Block a product
function confirmBlock(event, productId) {
    event.preventDefault();
    Swal.fire({
        title: "Are you sure?",
        text: "You are about to block this product!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, Block!"
    }).then((result) => {
        if (result.isConfirmed) {
            handleProductBlockUnblock(productId, 'block');
        }
    });
}

// Confirm and Unblock a product
function confirmUnblock(event, productId) {
    event.preventDefault();
    Swal.fire({
        title: "Are you sure?",
        text: "You are about to unblock this product!",
        icon: "info",
        showCancelButton: true,
        confirmButtonColor: "#28a745",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, Unblock!"
    }).then((result) => {
        if (result.isConfirmed) {
            handleProductBlockUnblock(productId, 'unblock');
        }
    });
}

// Handle block/unblock action for a product
// Handle block/unblock action for a product
function handleProductBlockUnblock(productId, action) {
    const url = `/admin/${action}Product`; // General URL to block/unblock

    console.log(`Sending ${action} request for product ID:`, productId); // Log the action and ID

    fetch(url, {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ id: productId })  // Make sure productId is correctly sent
    })
    .then(response => response.json())
    .then(data => {
        console.log('Response from server:', data); // Log the server response
        if (data.success) {
            Swal.fire({
                title: 'Success!',
                text: data.message,
                icon: 'success'
            }).then(() => {
                location.reload(); // Reload the page after success
            });
        } else {
            Swal.fire({
                title: 'Failed!',
                text: data.message,
                icon: 'error'
            });
        }
    })
    .catch(error => {
        console.error("Error:", error);
        Swal.fire({
            title: 'Error!',
            text: 'Something went wrong on the server side.',
            icon: 'error'
        });
    });
}


// Handle product deletion

function confirmDelete(event, productId) {
    event.preventDefault();
    Swal.fire({
        title: "Are you sure?",
        text: "You are about to delete this product permanently!",
        icon: "error",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, Delete it"
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: "/admin/deleteProduct", // Ensure this route is correct
                method: 'POST',
                data: { id: productId }, // Send 'id' instead of 'productId'
                success: (response) => {
                    if (response.status) {
                        Swal.fire("Deleted!", "The product has been deleted", "success").then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire('Error', response.message || 'Failed to delete product', 'error');
                    }
                },
                error: (error) => {
                    console.error('Error:', error);
                    Swal.fire('Error', 'An unexpected error occurred', 'error');
                }
            });
        }
    });
}

</script>

<%- include("../../views/partials/admin/footer") %>
