
<head>
    <link rel="stylesheet" href="/style/admin/product_edit.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<style>
/* Variables - Matching Original Sidebar Colors */
:root {
  --primary: #4361ee;
  --secondary: #3a0ca3;
  --light: #f8f9fa;
  --dark: #212529;
  --gray: #6c757d;
  --sidebar-bg: #333; /* Original sidebar background */
  --sidebar-text: #fff; /* Original sidebar text color */
  --sidebar-hover: #555; /* Original sidebar hover color */
  --card-bg: #ffffff;
  --card-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
  --border-radius: 4px;
  --transition: all 0.3s ease;
}

/* Base Styles */
body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
  color: #333;
  line-height: 1.6;
}

/* Admin Container */
.admin-container {
  display: flex;
  min-height: 100vh;
}

/* Sidebar Styles - EXACTLY matching original */
.sidebar {
  width: 200px;
  background-color: var(--sidebar-bg);
  color: var(--sidebar-text);
  position: fixed;
  height: 100vh;
  overflow-y: auto;
  z-index: 1000;
}

.sidebar-header {
  padding: 20px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar-header h3 {
  margin: 0;
  font-size: 1.2rem;
  color: var(--sidebar-text);
}

.sidebar-menu {
  list-style: none;
  padding: 10px 0;
  margin: 0;
}

.sidebar-menu li {
  margin: 5px 0;
}

.sidebar-menu li a {
  color: var(--sidebar-text);
  text-decoration: none;
  display: block;
  padding: 12px 20px;
  transition: var(--transition);
  border-radius: 4px;
  margin: 0 10px;
}

.sidebar-menu li a:hover,
.sidebar-menu li a.active {
  background-color: var(--sidebar-hover);
}

.sidebar-menu li a i {
  margin-right: 10px;
  width: 20px;
  text-align: center;
  font-size: 1.1rem;
}

/* Main Content */
.main-content {
  flex: 1;
  margin-left: 200px;
  padding: 20px;
}

.content-main {
  max-width: 1200px;
  margin: 0 auto;
}

.content-header {
  margin-bottom: 20px;
}

.content-title {
  font-size: 1.5rem;
  color: var(--dark);
  margin: 0;
}

/* Card Styles */
.card {
  background-color: var(--card-bg);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  margin-bottom: 20px;
}

.card-body {
  padding: 20px;
}

/* Form Styles */
.form-label {
  font-weight: 500;
  margin-bottom: 8px;
  display: block;
  color: var(--dark);
}

.form-control {
  width: 100%;
  padding: 10px 15px;
  border: 1px solid #ddd;
  border-radius: var(--border-radius);
  font-size: 1rem;
  transition: var(--transition);
}

.form-control:focus {
  border-color: var(--primary);
  outline: none;
}

.form-select {
  width: 100%;
  padding: 10px 15px;
  border: 1px solid #ddd;
  border-radius: var(--border-radius);
  font-size: 1rem;
}

textarea.form-control {
  min-height: 120px;
  resize: vertical;
}

/* Button Styles */
.btn {
  padding: 10px 20px;
  border-radius: var(--border-radius);
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition);
  border: none;
  font-size: 1rem;
}

.btn-primary {
  background-color: var(--primary);
  color: white;
}

.btn-primary:hover {
  background-color: #3a56d8;
}

.btn-danger {
  background-color: #dc3545;
  color: white;
}

.btn-danger:hover {
  background-color: #c82333;
}

.btn-success {
  background-color: #28a745;
  color: white;
}

.btn-success:hover {
  background-color: #218838;
}

.btn-warning {
  background-color: #ffc107;
  color: #000;
}

.btn-warning:hover {
  background-color: #e0a800;
}

.btn-sm {
  padding: 6px 12px;
  font-size: 0.85rem;
}

/* Image Upload & Cropping Styles */
.cropper-wrapper {
  display: none;
  margin-top: 15px;
  border: 1px solid #eee;
  border-radius: var(--border-radius);
  padding: 15px;
  background-color: #f9f9f9;
}

.img-container {
  width: 100%;
  height: 300px;
  margin-bottom: 15px;
  overflow: hidden;
}

.preview-image {
  max-width: 100%;
  max-height: 100%;
  display: none;
}

.crop-instructions {
  font-size: 0.9rem;
  color: var(--gray);
  text-align: center;
  margin-bottom: 15px;
}

.cropper-controls {
  display: flex;
  justify-content: center;
  gap: 10px;
}

.crop-btn {
  background-color: var(--primary);
  color: white;
  padding: 8px 16px;
  border-radius: var(--border-radius);
  border: none;
  cursor: pointer;
}

.reset-btn {
  background-color: var(--gray);
  color: white;
  padding: 8px 16px;
  border-radius: var(--border-radius);
  border: none;
  cursor: pointer;
}

/* Product Image Cards */
.card-img-top {
  width: 100%;
  height: 180px;
  object-fit: contain;
  background-color: #f8f9fa;
}

/* Responsive Styles */
@media (max-width: 1200px) {
  .admin-container {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
    height: auto;
    position: relative;
  }
  
  .main-content {
    margin-left: 0;
    padding: 15px;
  }
  
  .sidebar-menu {
    display: none;
  }
  
  .sidebar-menu.show {
    display: block;
  }
}

@media (max-width: 768px) {
  .card-body {
    padding: 15px;
  }
  
  .img-container {
    height: 250px;
  }
}

@media (max-width: 576px) {
  .content-title {
    font-size: 1.3rem;
  }
  
  .btn {
    padding: 8px 15px;
  }
  
  .img-container {
    height: 200px;
  }
}
</style>

</head>
<div class="admin-container">
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar" style="width: 200px;" >
      <div class="sidebar-header" style="position: fixed;">
       
     
      </div>
      <ul class="sidebar-menu" id="sidebarMenu" style="position: fixed;">
        <li><a href="/admin/dashboard"><i class="fas fa-tachometer-alt"></i> <span>Dashboard</span></a></li>
                <li><a href="/admin/users"><i class="fas fa-users"></i> <span>Customers</span></a></li>
                <li><a href="/admin/category"><i class="fas fa-list"></i> <span>Categories</span></a></li>
                <li><a href="/admin/orders"><i class="fas fa-shopping-bag"></i> <span>Orders</span></a></li>
                <li><a href="/admin/products"><i class="fas fa-plus-circle"></i> <span>Add Products</span></a></li>
                <li><a href="/admin/allProducts"><i class="fas fa-box"></i> <span>Products</span></a></li>
                <li><a href="/admin/coupon"><i class="fas fa-tags"></i> <span>Coupons</span></a></li>
                <li><a href="/admin/transaction"><i class="fas fa-money-bill-wave"></i> <span>Transactions</span></a></li>
                <li><a href="/admin/complaints"><i class="fas fa-exclamation-circle"></i> <span>Complaints</span></a></li>
                <li><a href="/admin/report"><i class="fas fa-chart-bar"></i> <span>Report</span></a></li>
      </ul>
    </div>
<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Edit Product</h2>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <form id="editProductForm" method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data">
                <div class="mb-4">
                    <label for="product_name" class="form-label">Product Name</label>
                    <input type="text" name="productName" value="<%= product.productName %>" class="form-control" id="product_name" required>
                </div>

                <div class="mb-4">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control" rows="4" required><%= product.description %></textarea>
                </div>

                <div class="row">
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Regular Price</label>
                            <input name="regularPrice" type="number" step="1" value="<%= product.regularPrice %>" class="form-control" required>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Sale Price</label>
                            <input name="salePrice" type="number" step="1" value="<%= Math.floor(product.salePrice) %>" class="form-control" max="<%= product.regularPrice %>" required>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="mb-4">
                            <label class="form-label">Quantity</label>
                            <input name="quantity" type="number" value="<%= product.quantity %>" class="form-control" min="0" required>
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    <label class="form-label">Category</label>
                    <select class="form-select" name="category" required>
                        <% cat.forEach(category => { %>
                            <option value="<%= category._id %>" <%= category._id.toString() === product.category.toString() ? 'selected' : '' %>>
                                <%= category.name %>
                            </option>
                        <% }) %>
                    </select>
                </div>

                <div class="col-lg-3">
                    <div class="mb-4">
                        <label class="form-label">Color</label>
                        <input name="color" type="string" value="<%= product.color %>" class="form-control" required>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="mb-4">
                        <label class="form-label">Brand</label>
                        <input name="brand" type="string" value="<%= product.brand %>" class="form-control" required>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="mb-4">
                        <label class="form-label">Size</label>
                        <input name="size" type="string" value="<%= product.size %>" class="form-control" required>
                    </div>
                </div>

                <!-- Image Upload & Cropping Section -->
              
                <div class="mb-4">
                    <label class="form-label">Product Images (Must upload 4 images)</label>
                    <div class="row">
                        <% for(let i = 0; i < 4; i++) { %>
                            <div class="col-md-3 mb-3">
                                <div class="card">
                                    <% if (product.productImage[i]) { %>
                                        <img src="<%= product.productImage[i] %>" class="card-img-top" alt="Product Image">
                                        <div class="card-body text-center">
                                            <button type="button" class="btn btn-danger btn-sm" style="color: red;" onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>', '<%= i %>')" >Delete Image</button>
                                        </div>
                                    <% } else { %>
                                        <div class="card-body">
                                            <input type="file" name="image<%= i+1 %>" accept="image/*" class="form-control" onchange="initImageCrop(event, '<%= i %>')">
                                            
                                            <!-- Cropper Container -->
                                            <div id="cropper-wrapper-<%= i %>" class="cropper-wrapper">
                                                <div class="img-container">
                                                    <img id="preview-<%= i %>" class="preview-image">
                                                </div>
                                                <p class="crop-instructions">Drag the corners to adjust crop area</p>
                                                <div class="cropper-controls">
                                                    <button type="button" class="crop-btn" onclick="applyCrop('<%= i %>')">Crop & Save</button>
                                                    <button type="button" class="reset-btn" onclick="resetCrop('<%= i %>')">Reset</button>
                                                </div>
                                            </div>
                                            
                                            <!-- Hidden input for cropped image -->
                                            <input type="hidden" id="cropped-image-<%= i %>" name="croppedImage<%= i+1 %>">
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>

                <div class="mb-4">
                    <button class="btn btn-primary" type="submit">Update Product</button>
                </div>
            </form>
        </div>
    </div>
</section>
</div>
<script>
    let croppers = {};
    let originalImages = {};

    // Initialize image cropping
    function initImageCrop(event, index) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        const preview = document.getElementById(`preview-${index}`);
        const wrapper = document.getElementById(`cropper-wrapper-${index}`);

        reader.onload = function(e) {
            // Store original image data
            originalImages[index] = e.target.result;
            
            // Show preview and wrapper
            preview.src = e.target.result;
            preview.style.display = 'block';
            wrapper.style.display = 'block';

            // Destroy previous cropper if exists
            if (croppers[index]) {
                croppers[index].destroy();
            }

            // Initialize cropper with options
            croppers[index] = new Cropper(preview, {
                aspectRatio: 1, // Square ratio (change as needed)
                viewMode: 1,    // Restrict crop box to image boundaries
                autoCrop: true,
                movable: true,
                zoomable: true,
                rotatable: false,
                scalable: true,
                cropBoxMovable: true,
                cropBoxResizable: true,
                minCanvasWidth: 200,
                minCanvasHeight: 200,
                background: false,
                ready: function() {
                    // Set initial crop box size (75% of image)
                    const containerData = this.cropper.getContainerData();
                    const initialSize = Math.min(containerData.width, containerData.height) * 0.75;
                    this.cropper.setCropBoxData({
                        width: initialSize,
                        height: initialSize
                    });
                }
            });
        };
        reader.readAsDataURL(file);
    }

    // Apply the crop and save
    function applyCrop(index) {
        if (!croppers[index]) {
            alert("Please select an image first.");
            return;
        }

        const canvas = croppers[index].getCroppedCanvas({
            width: 800,      // Output width
            height: 800,     // Output height
            minWidth: 256,
            minHeight: 256,
            maxWidth: 2000,
            maxHeight: 2000,
            fillColor: '#fff',
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high',
        });

        if (!canvas) {
            alert("Please adjust the crop frame before saving.");
            return;
        }

        // Convert canvas to blob and update form
        canvas.toBlob((blob) => {
            const fileInput = document.querySelector(`input[name="image${index+1}"]`);
            const file = new File([blob], `cropped-image-${index}.jpg`, { type: 'image/jpeg' });
            
            // Create a new DataTransfer and add the file
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;
            
            // Hide the cropper controls
            document.getElementById(`cropper-wrapper-${index}`).style.display = 'none';
            
            // Show success message
            alert("Image cropped and saved successfully!");
        }, 'image/jpeg', 0.9); // 90% quality
    }

    // Reset the cropping interface
    function resetCrop(index) {
        if (croppers[index]) {
            croppers[index].destroy();
            croppers[index] = null;
        }
        
        const wrapper = document.getElementById(`cropper-wrapper-${index}`);
        const preview = document.getElementById(`preview-${index}`);
        const fileInput = document.querySelector(`input[name="image${index+1}"]`);
        
        wrapper.style.display = 'none';
        preview.style.display = 'none';
        preview.src = '';
        fileInput.value = '';
    }

    // Delete existing image
    function deleteSingleImage(imageName, productId, index) {
        if (confirm('Are you sure you want to delete this image?')) {
            fetch('/admin/deleteImage', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    imageNameToServer: imageName,
                    productIdToServer: productId,
                    imageIndex: index
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.status) {
                    location.reload();
                } else {
                    alert('Failed to delete image');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while deleting the image');
            });
        }
    }

    // Form validation
    document.getElementById('editProductForm').addEventListener('submit', function(event) {
        let totalImages = '<%= product.productImage.length %>';
        const fileInputs = document.querySelectorAll('input[type="file"]');
        
        fileInputs.forEach(input => {
            if (input.files && input.files.length > 0) {
                totalImages++;
            }
        });

        if (totalImages < 4) {
            event.preventDefault();
            alert(`You need ${4 - totalImages} more images to proceed.`);
        }
    });
</script>