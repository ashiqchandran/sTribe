<%- include("../../views/partials/user/header") %>

    <title>Wishlist</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
    <!-- <link rel="stylesheet" href="/style/user/orders.css"> -->
    <link rel="stylesheet" href="/style/user/wallet.css">
  </head>
  <style>
    /* Enhanced Wishlist CSS */
  

      body {
    background-color: #f8f9fa;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #333;
   
    
  }

  .main-container {
    padding: 2rem 0;
    max-width:90vw;
  }

  .hero-banner {
    background-color: #e9f2ff;
    padding: 1.5rem 0;
    margin-bottom: 2rem;
  }

  .breadcrumb-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 15px;
  }

  .breadcrumb {
    padding: 0;
    background-color: transparent;
    font-size: 0.9rem;
  }

  .breadcrumb-item a {
    
    color: #4a6baf;
    text-decoration: none;
    transition: color 0.3s;
  }

  .breadcrumb-item a:hover {
    color: #2c4b8b;
  }

  .breadcrumb-item.active {
    color: #6c757d;
  }

  
  .ultra-sidebar-container {
    width: 18vw;
    min-width: 250px;
    background-color: #f8f9fa;
    border-right: 2px solid #e0e0e0;
    padding: 20px;
  
    min-height: 100vh;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.ultra-sidebar-header h2 {
    font-size: 22px;
    margin-bottom: 20px;
    color: #333;
    display: flex;
    align-items: center;
    gap: 10px;
}

.ultra-sidebar-menu a {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 12px 15px;
    margin-bottom: 10px;
    color: #555;
    text-decoration: none;
    background-color: #fff;
    border-radius: 6px;
    transition: all 0.3s ease;
    font-size: 16px;
}

.ultra-sidebar-menu a:hover,
.ultra-sidebar-menu a.ultra-active {
    background-color: #007bff;
    color: #fff;
}

.ultra-sidebar-menu a i {
    font-size: 18px;
}

.ultra-sidebar-menu .ultra-logout-btn {
    color: #dc3545;
}

.ultra-sidebar-menu .ultra-logout-btn:hover {
    background-color: #dc3545;
    color: white;
}

/* Tablet Screens */
@media (max-width: 991px) {
    .ultra-sidebar-container {
        width: 100%;
        min-width: 100%;
        border-right: none;
        border-bottom: 1px solid #ddd;
        padding: 15px;
        display: flex;
        flex-direction: row;
        overflow-x: auto;
        white-space: nowrap;
        gap: 10px;
    }

    .ultra-sidebar-header {
        display: none;
    }

    .ultra-sidebar-menu {
        display: flex;
        flex-direction: row;
        gap: 10px;
        width: 100%;
    }

    .ultra-sidebar-menu a {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        font-size: 13px;
        padding: 8px;
        min-width: 80px;
        border-radius: 10px;
    }

    .ultra-sidebar-menu a i {
        font-size: 18px;
    }
}

/* Small Mobile Screens */
@media (max-width: 576px) {
    .ultra-sidebar-menu a {
        padding: 6px;
        min-width: 65px;
        font-size: 12px;
    }

    .ultra-sidebar-menu a i {
        font-size: 16px;
    }
}

/* Main Content Styles */
.content-card {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  padding: 2rem;
  margin-bottom: 1.5rem;
}

.section-title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 1.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 1px solid #eee;
}

.section-subtitle {
  font-size: 1.25rem;
  font-weight: 600;
  color: #2c3e50;
  margin: 1.5rem 0 1rem;
}
    /* Wishlist Items */
    .wishlist-item {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 15px rgba(0,0,0,0.05);
      padding: 20px;
      margin-bottom: 20px;
      transition: all 0.3s ease;
    }
    
    .wishlist-item:hover {
      transform: translateY(-3px);
      box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }
    
    .wishlist-item img {
      width: 140px;
      height: 140px;
      object-fit: contain;
      border-radius: 8px;
      background: #f9f9f9;
      padding: 10px;
    }
    
    .product-details {
      flex: 1;
      padding: 0 20px;
    }
    
    .product-name {
      font-size: 1.2rem;
      font-weight: 600;
      color: #2c3e50;
      margin-bottom: 8px;
    }
    
    .product-description {
      font-size: 0.9rem;
      color: #7f8c8d;
      margin-bottom: 10px;
    }
    
    .product-price {
      font-size: 1.3rem;
      font-weight: 700;
      color: #e74c3c;
    }
    
    /* Action Buttons */
    .action-btns {
      min-width: 220px;
    }
    
    .remove-btn, .add-to-cart-btn {
      padding: 10px 20px;
      border-radius: 6px;
      font-size: 0.95rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      display: flex;
      align-items: center;
      justify-content: center;
      text-decoration: none;
    }
    
    .remove-btn {
      background-color: #fef0f0;
      color: #f56c6c;
    }
    
    .remove-btn:hover {
      background-color: #f56c6c;
      color: white;
    }
    
    .add-to-cart-btn {
      background-color: #f0f7ff;
      color: #1976d2;
    }
    
    .add-to-cart-btn:hover {
      background-color: #1976d2;
      color: white;
    }
    
    /* Empty State */
    .empty-wishlist {
      text-align: center;
      padding: 60px 20px;
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 15px rgba(0,0,0,0.05);
    }
    
    .empty-wishlist i {
      font-size: 4rem;
      color: #ddd;
      margin-bottom: 20px;
    }
    
    .empty-wishlist h4 {
      font-size: 1.5rem;
      color: #2c3e50;
      margin-bottom: 10px;
    }
    
    .empty-wishlist p {
      color: #95a5a6;
      margin-bottom: 25px;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 991px) {
      .sidebar {
        margin-bottom: 30px;
      }
      
      .wishlist-item {
        flex-direction: column;
        text-align: center;
      }
      
      .wishlist-item img {
        width: 100%;
        max-width: 200px;
        height: auto;
        margin: 0 auto 20px;
      }
      
      .product-details {
        padding: 0;
        margin-bottom: 15px;
      }
      
      .action-btns {
        width: 100%;
        flex-direction: row;
        justify-content: center;
        gap: 15px;
      }
      
      .remove-btn, .add-to-cart-btn {
        flex: 1;
        max-width: 200px;
        padding: 10px;
      }
    }
    
    @media (min-width: 992px) {
      .wishlist-item {
        display: flex;
        align-items: center;
      }
      
      .action-btns {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }
    }
   
/* ... (keep all your existing styles) ... */

/* Responsive Adjustments */
@media (max-width: 767px) {
  .sidebar {
    margin-bottom: 30px;
  }
  
  .wishlist-item {
    flex-direction: column;
    text-align: center;
    padding: 15px;
  }
  
  .wishlist-item img {
    width: 100%;
    max-width: 180px;
    height: auto;
    margin: 0 auto 15px;
  }
  
  .product-details {
    padding: 0;
    margin-bottom: 15px;
    text-align: center;
  }
  
  .action-btns {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center; /* Center buttons horizontally */
    gap: 10px;
    margin-top: 15px;
  }
  
  .remove-btn, .add-to-cart-btn {
    width: 100%;
    max-width: 200px;
    padding: 10px;
    margin: 0 auto; /* Center individual buttons */
  }
}

@media (min-width: 768px) and (max-width: 991px) {
  .action-btns {
    flex-direction: row;
    justify-content: center; /* Center buttons in tablet view */
  }
}

.main-container {
  padding: 2rem 0;
  max-width:90vw;
}

.hero-banner {
  background-color: #e9f2ff;
  padding: 1.5rem 0;
  margin-bottom: 2rem;
}

.breadcrumb-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 15px;
}

.breadcrumb {
  padding: 0;
  background-color: transparent;
  font-size: 0.9rem;
}

.breadcrumb-item a {
  
  color: #4a6baf;
  text-decoration: none;
  transition: color 0.3s;
}

.breadcrumb-item a:hover {
  color: #2c4b8b;
}

.breadcrumb-item.active {
  color: #6c757d;
}
/* ... (rest of your existing styles) ... */
</style>

  <body>
    
<body><main class="hero-banner">
  <div class="breadcrumb-container">
      <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
              <li class="breadcrumb-item"><a href="/">Home</a></li>
              <li class="breadcrumb-item active" aria-current="page">Wallet</li>
          </ol>
      </nav>
  </div>  
</main>

    <div class="container mt-4 mt-md-5">
      <div class="row">
          <!-- Sidebar -->
                            <!-- Sidebar -->
                                 
<div class="col-lg-3 col-md-4 ultra-sidebar-container">
  <div class="ultra-sidebar-header">
      <h2><i class="fas fa-user-circle me-2"></i>My Account</h2>
  </div>
  <div class="ultra-sidebar-menu">
      <a href="/Profile">
          <i class="fas fa-user"></i>Account Details
      </a>
      <a href="/address" >
          <i class="fas fa-map-marker-alt"></i>Address
      </a>
      <a href="/orders">
          <i class="fas fa-box-open"></i>Orders
      </a>
      <a href="/wishlist" >
          <i class="fas fa-heart"></i>Wishlist
      </a>
      <a href="/cart" >
          <i class="fas fa-shopping-cart"></i>Cart
      </a>
      <a href="/wallet"class="ultra-active">
          <i class="fas fa-wallet"></i>Wallet
      </a>
      <a href="/mycoupons">
          <i class="fas fa-tag"></i>My Coupons
      </a>
      <a href="#" onclick="confirmLogout(event)" class="ultra-logout-btn">
          <i class="fas fa-sign-out-alt me-2"></i>Logout
      </a>
  </div>
</div>
          <!-- Main Content -->
          <div class="col-md-9 main-content">
   
            <div class="wallet-container">
              <!-- Header with Wallet Balance -->
              <header class="wallet-header">
                  <h1>Wallet</h1>
                  <div class="wallet-balance">
                    
                      <span class="currency">BAL<span style="color:red"> :<%= Math.floor(bal) %> INR</span></span>
              

                  </div>
              </header>
      
              <!-- Action Buttons -->
              
              <div class="wallet-actions">
                <!-- Add Funds with Razorpay -->
                <div class="funds-section">
                  <input type="number" id="addAmount" placeholder="Amount" min="1" required>
                  <button onclick="initiateRazorpayPayment()" class="razorpay-btn">
                      Add via Razorpay
                  </button>
              </div>
            
              <!-- Withdraw Funds via Razorpay Payout -->
              <div class="funds-section">
                  <input type="number" id="withdrawAmount" placeholder="Amount" min="1" required>
                  <button onclick="initiateWithdrawal()" class="withdraw-btn">
                      Withdraw via Razorpay
                  </button>
              </div>
            </div>
                        
               
            
      
              <!-- Recent Transactions -->
              <!-- <section class="transactions">
                  <h2>Recent Transactions</h2>
                  <div class="transaction-list">
                      <div class="transaction-item">
                          <span class="transaction-date">03/25/2025</span>
                          <span class="transaction-description">Purchase</span>
                          <span class="transaction-amount">-$50.00</span>
                      </div>
                      <div class="transaction-item">
                          <span class="transaction-date">03/24/2025</span>
                          <span class="transaction-description">Refund</span>
                          <span class="transaction-amount">+$15.00</span>
                      </div>
                      <div class="transaction-item">
                          <span class="transaction-date">03/23/2025</span>
                          <span class="transaction-description">Deposit</span>
                          <span class="transaction-amount">+$100.00</span>
                      </div>
                  </div>
                  <button class="view-more-btn">View More</button>
              </section> -->
      
              <!-- Security Settings -->
              <!-- <section class="security-settings">
                  <h2>Security Settings</h2>
                  <button class="wallet-btn">Change PIN</button>
                  <button class="wallet-btn">Manage Payment Methods</button>
              </section> -->
            
        <section class="referral-code">
          <h2>Your Referral Code</h2>
          <div class="refreal-codes-field">
          <div class="referral-code-box">
            <span id="referral-code"><%= user.referralCode %></span> <!-- This would dynamically be the user's unique referral code -->
            <button onclick="copyReferralCode()">Copy Code</button>
          </div>
          <form action="/addPromoCode" method="POST" class="promocodes">
            <h2>Add Money to wallet</h2>
            <input type="text" name="promoCode" placeholder="Promo Code" required />
             <input type="hidden" name="userId" value="defaultUserId" />
            <button type="submit">Apply Promo Code</button>
          </form>
        </div> 
        </section>
        <br>
   
    <div class="transaction-history">
      <h4>Recent Transactions</h4>
      <table class="table table-bordered">
          <thead>
              <tr>
                  <th>Transaction ID</th>
                  <th>Type</th>
                  <th>Method</th>
                  <th>Status</th>
                  <th>Amount</th>
                  <th>Date</th>
              </tr>
          </thead>
          <tbody>
              <% transactions.forEach(transaction => { %>
              <tr>
                  <td><%= transaction._id %></td>
                  <td>
                    <%= (transaction.transactionType === 'Refund' || transaction.transactionType === 'Credit') ? 'Credit' : 'Debit' %>
                  </td>                  
                  <td><%= transaction.transactionType %></td>
                  <td><%= transaction.status %></td>
                  <td><%= Math.floor(transaction.amount) %> INR</td>
                  <td><%= new Date(transaction.date).toLocaleDateString('en-IN', {
                    weekday: 'short', // Abbreviated day (e.g., Mon, Tue)
                    year: 'numeric',  // Full year (e.g., 2025)
                    month: 'short',    // Abbreviated month (e.g., Jan, Feb)
                    day: 'numeric'     // Day of the month (e.g., 1, 2, 3)
                }) %></td>
                
              </tr>
              <% }) %>
          </tbody>
      </table>
  
      <!-- Pagination Controls -->
      <div class="pagination" style="justify-content: center;">
          <% if (currentPage > 1) { %>
          <a href="/wallet?page=<%= currentPage - 1 %>" class="btn btn-outline-primary"><</a>
          <% } %>
          
          <% for (let i = 1; i <= totalPages; i++) { %>
              <a href="/wallet?page=<%= i %>" class="btn <%= currentPage === i ? 'btn-primary' : 'btn-outline-primary' %>">
                  <%= i %>
              </a>
          <% } %>
          
          <% if (currentPage < totalPages) { %>
          <a href="/wallet?page=<%= currentPage + 1 %>" class="btn btn-outline-primary">Next</a>
          <% } %>
      </div>
  </div>
  
  </div>
  </div>
</div>
 
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Load Razorpay SDK -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  // Add Funds with Razorpay - Simplified Version
  async function initiateRazorpayPayment() {
      const amountInput = document.getElementById('addAmount');
      const amount = parseFloat(amountInput.value);
     
      if(!amount || amount < 1) {
          Swal.fire('Error', 'Please enter a valid amount (minimum ₹1)', 'error');
          return;
      }
  
      try {
          const razorpayBtn = document.querySelector('.razorpay-btn');
          razorpayBtn.disabled = true;
          razorpayBtn.textContent = 'Processing...';
  
          // Create order (simplified headers)
          const res = await fetch('/wallet/create-razorpay-order', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ amount: amount*100 })
          });
  
          const orderData = await res.json();
  
          if (!orderData.success || !orderData.order) {
              throw new Error(orderData.message || 'Failed to create order');
          }
  
          const options = {
              key: "<%= process.env.RAZORPAY_KEY_ID %>",
              amount: orderData.order.amount,
              order_id: orderData.order.id,
              currency: "INR",
              name: "Wallet Top-up",
              description: `Add ₹${amount } to wallet`,
              handler: async function(response) {
                  try {
                      const verification = await fetch('/wallet/verify-payment', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                              razorpay_payment_id: response.razorpay_payment_id,
                              razorpay_order_id: response.razorpay_order_id,
                              razorpay_signature: response.razorpay_signature,
                              amount: amount,
                              transactionId: orderData.transactionId
                          })
                      });
                      
                      const result = await verification.json();
                      if(result.success) {
                          Swal.fire('Success', `₹${amount} added to wallet!`, 'success');
                          location.reload();
                      } else {
                          throw new Error(result.message || 'Payment verification failed');
                      }
                  } catch (error) {
                      Swal.fire('Error', error.message, 'error');
                  } finally {
                      razorpayBtn.disabled = false;
                      razorpayBtn.textContent = 'Add via Razorpay';
                  }
              },
              modal: {
                  ondismiss: function() {
                      Swal.fire('Info', 'Payment cancelled by user', 'info');
                      razorpayBtn.disabled = false;
                      razorpayBtn.textContent = 'Add via Razorpay';
                  }
              },
              prefill: {
                  name: "<%= user.name %>",
                  email: "<%= user.email %>",
                  contact: "<%= user.mobile %>"
              }
          };
  
          const rzp = new Razorpay(options);
          rzp.open();
  
      } catch (error) {
          Swal.fire('Error', error.message, 'error');
          const razorpayBtn = document.querySelector('.razorpay-btn');
          razorpayBtn.disabled = false;
          razorpayBtn.textContent = 'Add via Razorpay';
      }
  }


  // withdraw
  async function initiateWithdrawal() {
  const amountInput = document.getElementById('withdrawAmount');
  const amount = parseFloat(amountInput.value);
  const withdrawBtn = document.querySelector('.withdraw-btn');

  if (!amount || amount < 1) {
    Swal.fire('Error', 'Minimum withdrawal amount is ₹1', 'error');
    return;
  }

  try {
    withdrawBtn.disabled = true;
    withdrawBtn.textContent = 'Processing...';

    // Create withdrawal request
    const response = await fetch('/wallet/create-withdrawal-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount: amount * 100 }) // Convert to paise
    });

    const orderData = await response.json();

    if (!orderData.success || !orderData.order) {
      throw new Error(orderData.message || 'Failed to create withdrawal order');
    }

    // Razorpay withdrawal interface
    const options = {
      key: "<%= process.env.RAZORPAY_KEY_ID %>",
      amount: orderData.order.amount,
      order_id: orderData.order.id,
      currency: "INR",
      name: "Wallet Withdrawal",
      description: `Withdraw ₹${amount} from wallet`,
      handler: async function(response) {
        try {
          const verification = await fetch('/wallet/verify-withdrawal', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_order_id: response.razorpay_order_id,
              razorpay_signature: response.razorpay_signature,
              amount: amount,
              transactionId: orderData.transactionId
            })
          });

          const result = await verification.json();
          if (result.success) {
            Swal.fire('Success', `Withdrawal of ₹${amount} processed!`, 'success');
            location.reload();
          } else {
            throw new Error(result.message || 'Withdrawal verification failed');
          }
        } catch (error) {
          Swal.fire('Error', error.message, 'error');
        } finally {
          withdrawBtn.disabled = false;
          withdrawBtn.textContent = 'Withdraw Funds';
        }
      },
      modal: {
        ondismiss: function() {
          Swal.fire('Info', 'Withdrawal cancelled by user', 'info');
          withdrawBtn.disabled = false;
          withdrawBtn.textContent = 'Withdraw Funds';
        }
      },
      prefill: {
        name: "<%= user.name %>",
        email: "<%= user.email %>",
        contact: "<%= user.mobile %>"
      }
    };

    const rzp = new Razorpay(options);
    rzp.open();

  } catch (error) {
    Swal.fire('Error', error.message, 'error');
    withdrawBtn.disabled = false;
    withdrawBtn.textContent = 'Withdraw Funds';
  }
}
  </script>