<%- include('../partials/user/header') %>

<link rel="stylesheet" href="/style/user/checkout.css">

<!-- Start Banner Area -->
<main class="hero">
    <div class="hero-content" style="background-image: url('/images/banners/banner2.jpg');">
        <div class="col-first">    
            <a href="/">Home<span class="lnr lnr-arrow-right"></span></a>
            <a href="/cart">/Cart<span class="lnr lnr-arrow-right"></span></a>
            <a href="/checkout">/Checkout</a>            
        </div>
    </div>  
</main>
<!-- End Banner Area -->

<body class="bg-light">
    <div class="container py-5">
        <div class="row">
            <!-- Billing Address -->
            <div class="col-lg-8 mb-4">
                <div class="bg-white p-4 rounded shadow-sm">
                    <h2 class="h4 mb-4">Shipping Address</h2>
                    
                    <!-- Address Selection Area -->
                    <div class="form-group">
                        <label for="existingAddress">Select Existing Address</label>
                        <select id="existingAddress" class="form-control">
                            <option selected>Select an address</option>
                            <% if (userAddress && userAddress.address.length > 0) { %>
                                <% userAddress.address.forEach((address) => { %>
                                    <option value="<%= address._id %>">
                                        <%= address.addressType %> - <%= address.name %>,
                                        <%= address.streetAddress %>, <%= address.city %>, <%= address.state %>, <%= address.country %>,
                                        <%= address.phone %>
                                    </option>
                                <% }); %>
                            <% } else { %>
                                <option disabled>No addresses available</option>
                            <% } %>
                        </select>
                    </div>
                    <a href="/addAddress?checkoutAdd=addNewAddress:0">
                        <button type="button" class="btn btn-primary mt-5" id="addNewAddressBtn">Add New Address</button>
                    </a>
                    
                    <!-- Add New Address Button -->
                    <% if (!userAddress || userAddress.address.length === 0) { %>
                        <p id="addNewAddressBtn">Add New Address</p>
                    <% } %>
            
                    <!-- New Address Form (hidden by default) -->
                    <div id="newAddressForm" style="display: none;">
                        <h3 class="h5 mt-4">New Address</h3>
                        <!-- Include new address form fields here if needed -->
                    </div>
                </div>
                <div class="coupon-section mt-3 couponsSection" style="margin-top: 20px;">
                    <h3 class="h5 mb-3" style="font-size: 1.25rem; margin-bottom: 1rem; font-weight: bold; color: #333;">Available Coupons</h3>
                    <% if (allCoupons && allCoupons.length > 0) { %>
                        <div class="coupon-list" style="display: flex; flex-direction: column; gap: 1rem;">
                            <div class="coupon-item" style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #ddd; font-weight: bold; color: #555;">
                                <span class="coupon-name" style="flex: 1; text-align: left; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Coupon Name</span>
                                <span class="coupon-expiry" style="flex: 1; margin-left: 11vw; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Expires On</span>
                                <span class="coupon-description" style="flex: 1; margin-left: 8vw; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">Discount Value</span>
                                <span style="flex: 1; text-align: right;"></span>
                            </div>
                            <% allCoupons.forEach(function(coupon) { %>
                                <div class="coupon-item" style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #ddd;">
                                    <span class="coupon-name" style="flex: 1; text-align: left; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-weight: 800;">
                                        <%= coupon.name %>
                                    </span>
                                    <span class="coupon-expiry" style="flex: 1; text-align: center; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                        <%= new Date(coupon.expireOn).toLocaleDateString('en-IN', { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' }) %>
                                    </span>
                                    <span class="coupon-description" style="flex: 1; text-align: center; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                        <%= coupon.offerPrice %>%
                                    </span>
                                    <button  class="btn btn-outline-primary apply-coupon-direct"  data-code="<%= coupon.name %>">  Add</div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <p style="font-size: 1rem; color: #777;">No coupons available.</p>
                    <% } %>
                </div>
            </div>
            
            <!-- Order Summary -->
            <div class="col-lg">
                <div class="order-summary" style="width: 21vw;">
                    <h2 class="h4 mb-4">Your Order</h2>
                    <div class="border-bottom pb-3 mb-3">
                        <div class="d-flex justify-content-between mb-2">
                            <span class="font-weight-bold">Products</span>
                            <span class="font-weight-bold">Subtotal</span>
                        </div>
                        <% if (cartItems && cartItems.length > 0) { %>
                            <% let subtotal = 0; %>
                            <% cartItems.forEach(function(item) { %>
                                <% subtotal += item.totalPrice; %>
                                <div class="d-flex justify-content-between mb-2">
                                    <div class="d-flex align-items-center">
                                        <a style="all: unset; display: contents;" href="/productDetails?id=<%=item.product._id%>">
                                            <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>">
                                            <div class="ml-2">
                                                <p class="product-name mb-0"><%= item.product.productName.split('|')[0].trim() %> (x<%= item.quantity %>)</p>
                                                <p class="product-mn mb-0"><%= item.product.category.name %></p>
                                            </div>
                                        </a>
                                    </div>
                                    <span class="product-price">₹ <%= Math.floor(item.totalPrice) %></span>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <p class="lead mb-4 text-center">No item found in Cart</p>
                        <% } %>
                    </div>
                    
                    <div class="border-bottom pb-3 mb-3">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal <span style="color:red">(after offer)</span></span>
                            <span class="total-price">₹ <%= Math.floor(preSubtotal) %></span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span class="coupondiscount">Coupon Discount</span>
                            <span id="dynamicDiscount">0.00</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping</span>
                            <span class="shipping-charge">₹ <%= shipping %></span>
                        </div>
                        <!-- <div class="text-right text-primary mb-2">
                            <a href="#" onclick="showShippingCharge(); return false;">View shipping charge</a>
                        </div> -->
                        <div class="d-flex justify-content-between font-weight-bold">
                            <span>Total</span>
                            <span class="finalDiscountAmount" >₹ <%= Math.floor(subtotal) %></span>
                        </div>
                    </div>
                    <div class="mb-4">
                        <h3 class="h5 mb-3">Payment Method</h3>
                        <div class="mb-3">
                            <label for="couponCode" class="form-label">Coupon Code</label>
                            <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code here...">
                            
                            <button class="btn btn-primary btn-block mt-2" id="applyCouponBtn">Apply Coupon</button>
                            <button class="btn btn-secondary btn-block mt-2" id="clearCouponBtn">Clear Coupon</button>
                          
                            <div id="couponMessage" class="text-danger mt-2"></div>
                          </div>
                        
                        <div class="mb-3">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="payment" class="mr-2" value="Razorpay">
                                <span>Razorpay</span>
                            </label>
                        </div> 
                        <% if (user.wallet>Math.floor(subtotal)) {%>
                           
                        <div class="mb-3">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="payment" value="wallet Payment">
                                <span>Wallet Payment</span> &nbsp&nbsp<span style="color: green;">  Bal :<%= Math.floor(user.wallet) %> </span>
                          
                               
                            </label>
                        </div> <% }else{ %>
                            <div class="mb-3">
                                <label class="d-flex align-items-center">
                                    <input type="radio" name="payment" value="wallet Payment">
                                    <span>Wallet Payment</span>  &nbsp&nbsp<span style="color: red;">  Bal:₹<%= Math.floor(user.wallet) %>  </span>
                              
                                   
                                </label>
                            </div> <% } %>
                        <div class="mb-3">
                            <label class="d-flex align-items-center">
                                <input type="radio" name="payment" class="mr-2" value="Cash on delivery" id="codRadio">
                                <% if (Math.floor(subtotal) > 1000) { %>
                                    <span><s>Cash on Delivery</s></span>
                                <% } else { %>
                                    <span>Cash on Delivery</span>
                                <% } %>
                            </label>
                        </div>
                    </div>
                    <button class="btn place-order-btn btn-block">Place Order</button>
                    <div id="codWarning" class="text-danger mt-2" style="display: none;">Cash on Delivery is not available for orders above ₹1000.</div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
 
 
 
  document.addEventListener('DOMContentLoaded', () => {
    const couponButtons = document.querySelectorAll('.apply-coupon-direct');
    const couponInput = document.getElementById('couponCode');

    couponButtons.forEach(button => {
      button.addEventListener('click', () => {
        const couponCode = button.getAttribute('data-code');
        couponInput.value = couponCode;
      });
    });
  });



  
// Clear Coupon
document.getElementById('clearCouponBtn').addEventListener('click', () => {
  fetch('/clearCoupon', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' }
  })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        Swal.fire('Coupon Removed', data.message || 'Coupon has been cleared.', 'success')
          .then(() => window.location.reload());
      } else {
        Swal.fire('Error', data.message || 'Could not remove coupon.', 'error');
      }
    })
    .catch(err => {
      console.error('Clear coupon error:', err);
      Swal.fire('Error', 'Failed to clear coupon.', 'error');
    });
});

        // Function to update COD availability based on total amount
        function updateCODAvailability() {
            const totalAmount = parseFloat(document.querySelector('.total-price').textContent.replace('₹', '').trim());
            const codRadio = document.getElementById('codRadio');
            const codWarning = document.getElementById('codWarning');
            

            if (totalAmount > 1000) {
                codRadio.disabled = true;
                codRadio.checked = false; // Uncheck if previously selected
                codWarning.style.display = 'block';
            } else {
                codRadio.disabled = false;
                codWarning.style.display = 'none';
            }
        }

        // Function to fetch wallet balance (simulated or real API call)
        async function getWalletBalance() {
            try {
                const response = await fetch('/getWalletBalance', {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
            
                return data.success ? data.wallet: 0; // Assume server returns { success: true, walletBalance: number }
            } catch (error) {
                console.error('Error fetching wallet balance:', error);
                return 0; // Default to 0 on error
            }
        }

        // Apply Coupon Logic
        document.getElementById('applyCouponBtn').addEventListener('click', function() {
            const couponCode = document.getElementById('couponCode').value.trim();
            const applyBtn = document.getElementById('applyCouponBtn');

            if (couponCode === '') {
                document.getElementById('couponMessage').textContent = 'Please enter a coupon code.';
                return;
            }

            applyBtn.disabled = true;
            applyBtn.textContent = 'Applying...';

            fetch('/applyCoupon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ couponCode: couponCode })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const discount = data.minimumPrice;
                    const subtotal = parseFloat(document.querySelector('.total-price').textContent.replace('₹', '').trim());
                    const shipping = parseFloat(document.querySelector('.shipping-charge').textContent.replace('₹', '').trim());
                    if (subtotal >= discount) {
                        const newTotal = subtotal - Math.floor((discount / 100) * subtotal);
                        const finalTotalAmount=newTotal+shipping
                        document.querySelector('.total-price').textContent = '₹ ' + newTotal;
                        document.getElementById('couponMessage').textContent = `Coupon applied! You saved ₹ ${Math.floor((discount / 100) * subtotal)}.`;
                        document.getElementById('dynamicDiscount').innerHTML = `₹ ${Math.floor((discount / 100) * subtotal)}`;
                        document.querySelector('.finalDiscountAmount').textContent = '₹ ' +finalTotalAmount;
                        
                        applyBtn.textContent = 'Applied';
                        applyBtn.style.backgroundColor = '#28a745';
                        applyBtn.style.borderColor = '#28a745';

                        // Update COD availability after applying coupon
                        updateCODAvailability();
                    } else {
                        document.getElementById('couponMessage').textContent = `Coupon cannot be applied. Minimum purchase is ₹ ${data.minimumPrice}.`;
                        applyBtn.disabled = false;
                        applyBtn.textContent = 'Apply Coupon';
                    }
                } else {
                    document.getElementById('couponMessage').textContent = data.message || 'Invalid coupon code.';
                    applyBtn.disabled = false;
                    applyBtn.textContent = 'Apply Coupon';
                }
            })
            .catch(error => {
                console.error('Error applying coupon:', error);
                document.getElementById('couponMessage').textContent = 'An error occurred while applying the coupon.';
                applyBtn.disabled = false;
                applyBtn.textContent = 'Apply Coupon';
            });
        });

        // Place Order Logic with Prevention
        async function placeOrder() {
            const selectedAddress = document.getElementById('existingAddress');
            const paymentMethod = document.querySelector('input[name="payment"]:checked');
            const coupondiscount=parseInt(document.querySelector('.coupondiscount').textContent.replace('₹', '').trim());
            const subtotal = parseInt(document.querySelector('.finalDiscountAmount').textContent.replace('₹', '').trim());
            const couponCode = document.getElementById('couponCode').value.trim();
            const btn = document.querySelector('.place-order-btn');

            // Condition 1: No address selected
            if (!selectedAddress || selectedAddress.value === 'Select an address') {
                Swal.fire('Error', 'Please select a shipping address', 'error');
                return;
            }

            // Condition 2: No payment method selected
            if (!paymentMethod) {
                Swal.fire('Error', 'Please select a payment method', 'error');
                return;
            }

            const paymentMethodSelected = paymentMethod.value;

            // Condition 3: Wallet Payment - Check balance
            if (paymentMethodSelected === 'wallet Payment') {
                const walletBalance = await getWalletBalance();
                if (walletBalance < subtotal) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Insufficient Wallet Balance',
                        text: `Your wallet balance (₹${walletBalance}) is less than the order total (₹${subtotal}). Please add funds or choose another payment method.`,
                    });
                    return; // Prevent action
                }
            }

            // Condition 4: Cash on Delivery - Reinforce ₹1000 limit
            if (paymentMethodSelected === 'Cash on delivery' && subtotal > 1000) {
                Swal.fire({
                    icon: 'error',
                    title: 'Cash on Delivery Unavailable',
                    text: 'Cash on Delivery is not available for orders above ₹1000.',
                });
                return; // Prevent action
            }

            // If all conditions pass, proceed with order placement
            btn.disabled = true;
            btn.textContent = 'Processing...';

            const discount = parseInt(document.getElementById('dynamicDiscount').textContent.replace('₹', '').trim()) || 0;


        
// For all payment methods, use this consistent structure:
const requestData = {
  userId: '<%= user._id %>',
  amount: subtotal.toFixed(),
  addressId: selectedAddress.value,
  couponCode: couponCode || null,  // Always include couponCode
  couponDiscount: discount || 0    // Always include the calculated discount
};
            const handleResponse = (data) => {
                if (data.success) {
                    window.location.href = `/success`;
                } else {
                    Swal.fire('Error', data.message || 'Operation failed', 'error');
                    btn.disabled = false;
                    btn.textContent = 'Place Order';
                }
            };

            const handleError = (error) => {
    console.error('Error:', error);
    Swal.fire('Error', error.message || 'An error occurred while processing your request', 'error');
    btn.disabled = false;
    btn.textContent = 'Place Order';
};
if (paymentMethodSelected === 'wallet Payment') {
    fetch('/walletPayment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData)
    })
    .then(async response => {
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || 'Something went wrong.');
        }
        return data;
    })
    .then(handleResponse)
    .catch(handleError);
}
else if (paymentMethodSelected === 'Cash on delivery') {
                fetch('/placeOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                })
                .then(response => response.json())
                .then(handleResponse)
                .catch(handleError);
            } else if (paymentMethodSelected === 'Razorpay') {
    fetch('/razorpayPayment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const options = {
                key: data.razorpayKey,
                amount: subtotal * 100,
                currency: "INR",
                name: "Your Store",
                description: "Order Payment",
                order_id: data.orderId,
                handler: function (response) {
                    fetch('/razorpayPaymentsuccess', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpayPaymentId: response.razorpay_payment_id,
                            orderId: data.orderId,
                            addressId: data.addressId,
                            couponDiscount:data.couponDiscount,
                            couponCode :couponCode||null
                        })
                    })
                    .then(response => response.json())
                    .then(handleResponse)
                    .catch(handleError);
                },
                modal: {
                    ondismiss: function () {
    window.location.href = `/payment/failure?orderId=${data.orderId}&subtotal=${subtotal}&addressId=${data.addressId}&couponCode=${couponCode || ''}&couponDiscount=${data.couponDiscount || 0}`;
}

                },
                prefill: {
                    name: "Customer Name",
                    email: "customer@example.com",
                    contact: "+9185938865",
                },
                theme: { color: "#F37254" },
            };
            const razorpay = new Razorpay(options);
            razorpay.open();
        } else {
            handleResponse(data);
        }
    })
    .catch(handleError);

            } else {
                Swal.fire('Error', 'Unsupported payment method', 'error');
                btn.disabled = false;
                btn.textContent = 'Place Order';
            }
        }

        // Event Listeners
        window.addEventListener('load', function() {
            updateCODAvailability();
            document.getElementById('couponCode').value = '';
            document.getElementById('couponMessage').textContent = '';
            document.getElementById('dynamicDiscount').textContent = '₹0';
            const applyBtn = document.getElementById('applyCouponBtn');
            applyBtn.disabled = false;
            applyBtn.textContent = 'Apply Coupon';
            applyBtn.style.backgroundColor = '';
            applyBtn.style.borderColor = '';
        });

        document.querySelector('.place-order-btn').addEventListener('click', function(e) {
            e.preventDefault();
            placeOrder();
        });

        document.getElementById('addNewAddressBtn').addEventListener('click', function() {
            document.getElementById('newAddressForm').style.display = 'block';
        });
    </script>
</body>

<%- include('../partials/user/footer') %>