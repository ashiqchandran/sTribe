<%- include("../../views/partials/user/header") %>


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<link rel="stylesheet" href="/style/user/orders.css">

<style>
  :root {
    --primary: #007bff;
    --secondary: #6c757d;
    --danger: #dc3545;
    --success: #28a745;
    --warning: #ffc107;
    --light: #f8f9fa;
    --dark: #343a40;
  }

  body {
    background-color: var(--light);
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #212529;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  main {
    flex: 1;
  }

  /* Breadcrumb */
  .breadcrumb-container {
    background-color: #e9f2ff;
    padding: 1rem 0;
  }

  .breadcrumb {
    padding: 0;
    margin: 0;
    background: transparent;
  }

  /* Account Layout */
  .account-container {
    padding: 2rem 0;
  }

  /* Sidebar */
  .account-sidebar {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    height: 100%;
  }

  .account-sidebar h2 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: var(--dark);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .sidebar-menu {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .sidebar-menu a {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    color: #495057;
    text-decoration: none;
    border-radius: 6px;
    transition: all 0.2s ease;
  }

  .sidebar-menu a:hover,
  .sidebar-menu a.active {
    background-color: var(--primary);
    color: white;
  }

  .sidebar-menu a i {
    width: 1.25rem;
    text-align: center;
  }

  .sidebar-menu .logout-btn {
    color: var(--danger);
  }

  .sidebar-menu .logout-btn:hover {
    background-color: var(--danger);
    color: white;
  }

  /* Orders Content */
  .orders-content {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    padding: 2rem;
    margin-bottom: 1.5rem;
  }

  /* Order Card */
  .order-card {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    overflow: hidden;
  }

  .order-header {
    background-color: #f8f9fa;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #dee2e6;
  }

  .order-items {
    padding: 1.5rem;
  }

  .order-item {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    padding: 1rem 0;
    border-bottom: 1px solid #dee2e6;
  }

  .order-item:last-child {
    border-bottom: none;
  }

  .item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 4px;
  }

  .item-details {
    flex: 1;
    min-width: 200px;
  }

  .item-actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    min-width: 120px;
  }

  .status-badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    color: white;
  }

  .bg-success { background-color: var(--success); }
  .bg-danger { background-color: var(--danger); }
  .bg-info { background-color: #17a2b8; }
  .bg-warning { background-color: var(--warning); color: #212529; }
  .bg-secondary { background-color: var(--secondary); }

  /* No Orders */
  .no-orders {
    text-align: center;
    padding: 3rem 1rem;
  }

  /* Pagination */
  .pagination {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
    margin-top: 2rem;
  }

  /* Responsive Adjustments */
  @media (max-width: 992px) {
    .account-sidebar {
      margin-bottom: 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .order-item {
      flex-direction: column;
    }
    
    .item-actions {
      flex-direction: row;
      flex-wrap: wrap;
    }
    
    .item-actions .btn {
      flex: 1;
      min-width: 120px;
    }
  }
</style>

<body>
  <!-- Breadcrumb -->
  <div class="breadcrumb-container">
    <div class="container">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Home</a></li>
          <li class="breadcrumb-item active" aria-current="page">Orders</li>
        </ol>
      </nav>
    </div>
  </div>

  <!-- Main Content -->
  <main class="account-container">
    <div class="container">
      <div class="row">
        <!-- Sidebar -->
        <div class="col-lg-3">
          <div class="account-sidebar">
            <h2><i class="fas fa-user-circle"></i> My Account</h2>
            <div class="sidebar-menu">
              <a href="/Profile"><i class="fas fa-user"></i>Account Details</a>
              <a href="/address"><i class="fas fa-map-marker-alt"></i>Address</a>
              <a href="/orders" class="active"><i class="fas fa-box-open"></i>Orders</a>
              <a href="/wishlist"><i class="fas fa-heart"></i>Wishlist</a>
              <a href="/cart"><i class="fas fa-shopping-cart"></i>Cart</a>
              <a href="/wallet"><i class="fas fa-wallet"></i>Wallet</a>
              <a href="/mycoupons"><i class="fas fa-tag"></i>My Coupons</a>
              <a href="#" onclick="confirmLogout(event)" class="logout-btn"><i class="fas fa-sign-out-alt"></i>Logout</a>
            </div>
          </div>
        </div>

        <!-- Orders Content -->
        <div class="col-lg-9">
          <div class="orders-content">
            <h2 class="mb-4">Your Orders</h2>

            <% if (orders && orders.length > 0) { 
              const orderGroups = {};
              orders.forEach(order => {
                if (!orderGroups[order.orderGroupId]) {
                  orderGroups[order.orderGroupId] = [];
                }
                orderGroups[order.orderGroupId].push(order);
              });
            %>
            
            <% for (const [orderGroupId, groupOrders] of Object.entries(orderGroups)) { 
              const firstOrder = groupOrders[0];
            %>
              <div class="order-card">
                <div class="order-header">
                  <strong>Order #<%= orderGroupId %></strong>
                  <div class="text-muted small">Placed on <%= new Date(firstOrder.createdOn).toLocaleDateString() %></div>
                </div>
                
                <div class="order-items">
                    <% groupOrders.forEach((order, index) => { %>
                      <div class="order-item">
                        <img src="<%= order.productImage[0] %>" class="item-image" alt="<%= order.productName %>">
                        
                        <div class="item-details">
                          <h5><%= order.productName %></h5>
                          <div class="d-flex flex-wrap gap-3 mb-2">
                            <span class="text-muted">Qty: <%= order.quantity %></span>
                            <span class="text-muted">Price: ₹<%= Math.floor(order.price) %></span>
                            <span class="status-badge <%= 
                              order.status === 'delivered' ? 'bg-success' :
                              order.status === 'cancelled' ? 'bg-danger' :
                              order.status === 'shipped' ? 'bg-info' :
                              order.status === 'failed' ? 'bg-secondary' :
                              'bg-warning'
                            %>">
                              <%= order.status.toUpperCase() %>
                            </span>
                          </div>
                          <div>
                            <span class="text-muted">Size: <%= order.size %></span>
                            <span class="text-muted ms-2">Color: <%= order.color %></span>
                          </div>
                        </div>
                        
                        <div class="item-actions">
                            <% if (order.status !== 'delivered' && order.status !== 'cancelled' && order.status !== 'failed') { %>
                                <button onclick="cancelSingleItem('<%= order.orderId %>', '<%= order.productName.replace(/'/g, "\\'") %>')" 
                                        class="btn btn-outline-danger btn-sm">
                                  Cancel
                                </button>
                              <% } %>
                          
                          <% if (order.status === 'delivered' && 
                                !['requested', 'approved', 'rejected'].includes(order.returnStatus) && 
                                order.isReturnable) { %>
                            <button onclick="requestReturn('<%= order.orderId %>')" 
                                    class="btn btn-outline-warning btn-sm">
                              Return
                            </button>
                          <% } %>
                          
                          <% if (order.status !== 'failed') { %>
                            <a href="/trackOrders/<%= order.orderId %>" class="btn btn-primary btn-sm">Details</a>
                          <% } %>
                          
                          <% if (order.status === 'failed') { %>
                            <button onclick="retryPayment('<%= order.orderId %>')" class="btn btn-outline-danger btn-sm">Retry</button>
                          <% } %>
                          
                          <% if (order.status === 'delivered') { %>
                            <button onclick="openRatingForm('<%= order.productId %>')" class="btn btn-outline-success btn-sm">Rate</button>
                          <% } %>
                          
                          <% if ((order.status === 'delivered' || order.status === 'cancelled') || order.returnStatus === 'refunded') { %>
                            <button onclick="invoiceDownload('<%= order.orderId %>')" class="btn btn-outline-primary btn-sm">Invoice</button>
                          <% } %>
                          
                          <% if (order.returnStatus === 'requested') { %>
                            <span class="badge bg-warning text-dark">Return Requested</span>
                          <% } %>
                          
                          <% if (order.returnStatus === 'rejected') { %>
                            <button onclick="showRejectionReason('<%= order.orderId %>', '<%= order.returnReason %>')" 
                                    class="btn btn-outline-danger btn-sm">
                              Rejected
                            </button>
                          <% } %>
                        </div>
                      </div>
                      
                      <!-- Show total only after the last item -->
                      <% if (index === groupOrders.length - 1) { %>
                        <div class="text-end mt-3 pt-3 border-top">
                          <strong>Order Total: ₹<%= Math.floor(order.finalAmount) %></strong>
                        </div>
                      <% } %>
                    <% }); %>
                  </div>
              </div>
            <% } %>
            
            <!-- Pagination -->
            <div class="pagination">
              <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %>" class="btn btn-outline-secondary btn-sm">Previous</a>
              <% } %>
              <% for (let i = 1; i <= totalPages; i++) { %>
                <a href="?page=<%= i %>" class="btn btn-outline-secondary btn-sm <%= i === currentPage ? 'active' : '' %>"><%= i %></a>
              <% } %>
              <% if (currentPage < totalPages) { %>
                <a href="?page=<%= currentPage + 1 %>" class="btn btn-outline-secondary btn-sm">Next</a>
              <% } %>
            </div>
            
            <% } else { %>
              <div class="no-orders">
                <div class="mb-4">
                  <i class="fas fa-shopping-bag fa-3x text-muted"></i>
                </div>
                <h3>No orders yet</h3>
                <p class="text-muted">When you place an order, it will appear here.</p>
                <a href="/shop" class="btn btn-primary mt-3">Start Shopping</a>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </main>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <!-- Script Includes -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function showRejectionReason(orderId, reason) {
          Swal.fire({
            title: 'Return Request Rejected',
            html: `
              <div class="text-start">
                <p><strong>Order ID:</strong> ${orderId}</p>
                <p><strong>Reason:</strong> ${reason || 'No reason provided'}</p>
              </div>
            `,
            icon: 'error',
            confirmButtonText: 'OK',
            customClass: {
              popup: 'rejection-popup'
            }
          });
        }
        </script>
        
        <style>
        .rejection-popup {
          max-width: 500px;
        }
        </style>

    <script>
     function retryPayment(orderId) {
    console.log('[Payment Retry] Initiating retry process for order:', orderId);

    fetch(`/retryPayment/${orderId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})  // No need to send orderId in the body since it's in the URL
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to initiate payment retry');
        }
        return response.json();
    })
    .then(data => {
        console.log("Data from retryPayment response:", data);

        if (data.success) {
            const options = {
                key: data.razorpayKey,
                amount: data.finalAmount * 100, // Ensure the amount is in paise
                currency: "INR",
                name: "Your Store",
                description: "Order Payment Retry",
                order_id: data.razorpayOrderId,
                handler: function(response) {
                    // Handle successful payment
                    console.log("Payment successful:", response);

                    fetch('/verify-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            orderId: data.orderId,
                            finalAmount: data.finalAmount
                        })
                    })
                    .then(response => response.json())
                    .then(verifyData => {
                        console.log("Payment verification response:", verifyData);
                        if (verifyData.success) {
                            window.location.href = `/success?orderId=${verifyData.orderId}`;
                        } else {
                            alert('Payment verification failed: ' + verifyData.message);
                            window.location.href = `/failure?orderId=${verifyData.orderId}`;
                        }
                    })
                    .catch(error => {
                        console.error('Payment verification error:', error);
                        alert('Payment verification failed. Please contact support.');
                        window.location.href = `/payment/failure?orderId=${data.orderId}`;
                    });
                },
                modal: {
                    ondismiss: function() {
                        document.getElementById('retry-button').innerText = 'Retry Payment';
                        document.getElementById('retry-button').disabled = false;
                    }
                },
                prefill: {
                    name: data.customerName || "Customer",
                    email: data.customerEmail || "",
                    contact: data.customerPhone || ""
                },
                theme: { color: "#F37254" }
            };

            const razorpay = new Razorpay(options);
            razorpay.open();
        } else {
            alert('Failed to initialize payment: ' + data.message);
            document.getElementById('retry-button').innerText = 'Retry Payment';
            document.getElementById('retry-button').disabled = false;
        }
    })
    .catch(error => {
        console.error('Error retrying order:', error);
        alert('Failed to initialize payment. Please try again later.');
        document.getElementById('retry-button').innerText = 'Retry Payment';
        document.getElementById('retry-button').disabled = false;
    });
}

        // async function cancelOrderGroup(orderGroupId) {
        //     try {
        //         const { value: reason } = await Swal.fire({
        //             title: 'Confirm Group Cancellation',
        //             input: 'textarea',
        //             inputLabel: 'Reason for cancelling entire order',
        //             inputPlaceholder: 'Please explain why you want to cancel the entire order...',
        //             showCancelButton: true,
        //             inputValidator: (value) => !value && 'Please provide a reason'
        //         });

        //         if (!reason) return;

        //         const response = await fetch('/cancelgroup', {
        //             method: 'POST',
        //             headers: {
        //                 'Content-Type': 'application/json',
        //             },
        //             body: JSON.stringify({ orderGroupId, reason }),
        //         });

        //         const result = await response.json();

        //         if (result.success) {
        //             await Swal.fire({
        //                 icon: 'success',
        //                 title: 'Order Group Cancelled',
        //                 html: `
        //                     <p>Order group #${orderGroupId} has been cancelled</p>
        //                     ${result.data.refundProcessed ? 
        //                         `<p>₹${result.data.refundAmount} has been credited to your wallet</p>` : ''}
        //                 `,
        //                 willClose: () => window.location.reload()
        //             });
        //         } else {
        //             throw new Error(result.message || 'Failed to cancel order group');
        //         }
        //     } catch (error) {
        //         Swal.fire('Error', error.message, 'error');
        //         console.error('Group cancellation error:', error);
        //     }
        // }

        async function cancelSingleItem(orderId, productName) {
    try {
        console.log("cancel isworking")
        const { value: selectedReason } = await Swal.fire({
            title: `Cancel ${productName}`,
            html: `
                <select id="cancel-reason-select" class="swal2-select" style="width: 50vh; padding: 8px; margin-bottom: 10px;">
                    <option value="" disabled selected>Select a reason</option>
                    <option value="Changed my mind">Changed my mind</option>
                    <option value="Ordered by mistake">Ordered by mistake</option>
                    <option value="Found a better price elsewhere">Found a better price elsewhere</option>
                    <option value="Item will not arrive on time">Item will not arrive on time</option>
                    <option value="Other">Other</option>
                </select>
                <textarea id="custom-reason" class="swal2-textarea" style="display:none;" placeholder="Enter custom reason here..."></textarea>
            `,
            showCancelButton: true,
            confirmButtonText: 'Submit',
            preConfirm: () => {
                const reasonSelect = document.getElementById('cancel-reason-select');
                const customReasonInput = document.getElementById('custom-reason');
                const selected = reasonSelect.value;

                if (!selected) {
                    Swal.showValidationMessage('Please select a reason');
                    return false;
                }

                if (selected === 'Other') {
                    const customReason = customReasonInput.value.trim();
                    if (!customReason) {
                        Swal.showValidationMessage('Please enter your custom reason');
                        return false;
                    }
                    return customReason;
                }

                return selected;
            },
            didOpen: () => {
                const select = document.getElementById('cancel-reason-select');
                const textarea = document.getElementById('custom-reason');

                select.addEventListener('change', () => {
                    if (select.value === 'Other') {
                        textarea.style.display = 'block';
                    } else {
                        textarea.style.display = 'none';
                    }
                });
            }
        });

        if (!selectedReason) return;

        const response = await fetch('/orders/cancel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, reason: selectedReason }),
        });

        const result = await response.json();

        if (result.success) {
            const isLastItem = await checkIfLastItem(orderId);

            const message = isLastItem
                ? 'This was the last item in your order. The entire order has been cancelled.'
                : 'The item has been cancelled successfully';

            await Swal.fire({
                icon: 'success',
                title: 'Cancellation Confirmed',
                text: message,
                willClose: () => window.location.reload()
            });
        } else {
            throw new Error(result.message || 'Failed to cancel item');
        }

    } catch (error) {
        Swal.fire('Error', error.message, 'error');
        console.error('Item cancellation error:', error);
    }
}

        async function checkIfLastItem(orderId) {
            try {
                const response = await fetch(`/orders/check-last-item?orderId=${orderId}`);
                const result = await response.json();
                return result.isLastItem;
            } catch (error) {
                console.error('Error checking last item:', error);
                return false;
            }
        }

        function confirmLogout(event) {
            event.preventDefault();
            Swal.fire({
                title: "Are you sure?",
                text: "You will be logged out!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, Logout"
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "/logout";
                }
            });
        }

      // Replace both invoiceDownload functions with this single version
async function invoiceDownload(orderId) {
    try {
        // Show loading indicator
        Swal.fire({
            title: 'Generating Invoice',
            html: 'Please wait while we prepare your invoice...',
            allowOutsideClick: false,
            didOpen: () => Swal.showLoading()
        });

        // Fetch invoice data
        const response = await fetch(`/orders/invoice?orderId=${orderId}`);
        
        if (!response.ok) {
            throw new Error('Failed to generate invoice');
        }

        // Convert response to blob
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        
        // Create temporary link
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = `invoice-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        
        // Cleanup
        window.URL.revokeObjectURL(downloadUrl);
        document.body.removeChild(a);
        
        Swal.close();
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Download Failed',
            text: error.message
        });
        console.error('Invoice download error:', error);
    }
}

// Handle both single and group invoices
router.get('/orders/invoice', async (req, res) => {
    try {
        const { orderId } = req.query;
        
        // Find order(s) - works for both single and group orders
        const orders = await Order.find({ 
            $or: [
                { _id: orderId },
                { orderGroupId: orderId }
            ]
        }).populate('products.productId');

        if (!orders.length) {
            return res.status(404).send('Order not found');
        }

        // Create PDF
        const doc = new PDFDocument();
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename=invoice-${orderId}.pdf`);

        // PDF content generation
        doc.pipe(res);
        
        // Add common header
        doc.fontSize(20).text('INVOICE', { align: 'center' });
        doc.moveDown();

        // Add order details
        orders.forEach((order, index) => {
            doc.fontSize(12)
               .text(`Product ${index + 1}: ${order.products[0].productId.name}`, { continued: true })
               .text(` - ₹${order.totalAmount}`, { align: 'right' });
            doc.moveDown();
        });

        // Add total
        const total = orders.reduce((sum, order) => sum + order.totalAmount, 0);
        doc.fontSize(14)
           .text(`Total: ₹${total}`, { align: 'right' });

        doc.end();
    } catch (err) {
        console.error(err);
        res.status(500).send('Error generating invoice');
    }
});
function invoiceDownload(orderId) {
    // Just open the download in new tab
    window.open(`/orders/invoice?orderId=${orderId}`, '_blank');
}
function requestReturn(orderId) {
    Swal.fire({
        title: 'Return Reason',
        input: 'textarea',
        inputLabel: 'Please enter the reason for return',
        inputPlaceholder: 'Type your reason here...',
        inputAttributes: {
            'aria-label': 'Return reason'
        },
        showCancelButton: true,
        confirmButtonText: 'Submit',
        cancelButtonText: 'Cancel',
        inputValidator: (value) => {
            if (!value) {
                return 'Return reason is required';
            }
        }
    }).then((result) => {
        if (result.isConfirmed) {
            const reason = result.value;

            // Proceed with the fetch after getting the reason
            fetch('/requestReturn', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId, reason })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success', data.message, 'success');
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            })
            .catch(() => {
                Swal.fire('Error', 'Something went wrong.', 'error');
            });
        }
    });
}
function openRatingForm(productId) {
    Swal.fire({
      title: 'How was the product?',
      html: `
        <span data-rating="1">Rate Me</span>
        <div id="emoji-rating" style="font-size: 32px; display: flex; justify-content: space-around; cursor: pointer;">
          <span data-rating="1">😠</span>
          <span data-rating="2">😕</span>
          <span data-rating="3">😐</span>
          <span data-rating="4">😊</span>
          <span data-rating="5">😍</span>
        </div>
        <textarea id="rating-message" class="swal2-textarea" placeholder="Leave a review..."></textarea>
      `,
      showCancelButton: true,
      confirmButtonText: 'Submit',
      didOpen: () => {
        let selectedRating = 0;
        const emojis = document.querySelectorAll('#emoji-rating span');

        emojis.forEach(emoji => {
          emoji.addEventListener('click', () => {
            selectedRating = parseInt(emoji.getAttribute('data-rating'));

            emojis.forEach(e => e.style.border = 'none'); // Reset all
            emoji.style.border = '2px solid green'; // Highlight selected
            emoji.style.borderRadius = '50%';
            emoji.style.padding = '5px';

            // Save the selected rating in a hidden input
            document.getElementById('emoji-rating').setAttribute('data-selected', selectedRating);
          });
        });
      },
      preConfirm: () => {
        const stars = parseInt(document.getElementById('emoji-rating').getAttribute('data-selected'));
        const message = document.getElementById('rating-message').value.trim();

        if (!stars || stars < 1 || stars > 5) {
          Swal.showValidationMessage('Please select an emoji rating!');
          return false;
        }

        return { stars, message };
      }
    }).then(result => {
      if (result.isConfirmed) {
        const { stars, message } = result.value;

        // Send to backend
        fetch('/product/rate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, stars, message })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire('Thanks!', 'Your review has been submitted.', 'success');
            // Hide the "Add Rating" button after successful submission
            const buttons = document.querySelectorAll(`button[onclick="openRatingForm('${productId}')"]`);
            buttons.forEach(button => {
              button.style.display = 'none';
            });
          } else {
            Swal.fire('Oops!', data.message || 'Something went wrong.', 'error');
          }
        })
        .catch(() => {
          Swal.fire('Error', 'Failed to submit review.', 'error');
        });
      }
    });
  }

  //this is for the responce for return 

  
  async function openPopupWithMessage(orderId) {
    try {
        const response = await fetch(`/orders/get-rejection-message/${orderId}`);
        const data = await response.json();
console.log("data = ",data)
        if (!data.success) throw new Error(data.message);

        const { messageFromBackend } = data;

        await Swal.fire({
            title: 'Refund Rejected',
            icon: 'info',
            html: `
                <p style="text-align:center;color:red">
                    <strong>Reason given by admin:</strong><br>${messageFromBackend}
                </p>
            `
        });
    } catch (err) {
        console.error(err);
        Swal.fire('Error', err.message || 'Could not fetch reason', 'error');
    }
}



    </script>
    
</body>

<%- include("../../views/partials/user/footer") %>
